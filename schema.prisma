generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
    chatId        BigInt             @id // Telegram's chat ID can be 52 bits at most
    username      String?            @unique
    createdAt     DateTime           @default(now()) @map(name: "created_at")
    updatedAt     DateTime           @updatedAt @map(name: "updated_at")
    // CarInfo       String             @default("")
    requests      RideRequest[]
    announcements RideAnnouncement[]
    tonAddress    String?

    @@map(name: "users")
}

model RideRequest {
    id         Int      @id @default(autoincrement())
    from       String
    to         String
    time       DateTime
    /// How many people are looking for a ride together
    passengers Int      @default(1)
    user       User     @relation(fields: [userChatId], references: [chatId])
    userChatId BigInt

    @@map("requests")
}

model RideAnnouncement {
    id         Int      @id @default(autoincrement())
    from       String
    to         String
    time       DateTime
    /// How many places are available
    passengers Int      @default(1)
    /// Price per seat
    price      Int      @default(0)
    /// Description of the car to make it easier to find
    carInfo    String   @default("")
    user       User     @relation(fields: [userChatId], references: [chatId])
    userChatId BigInt

    @@map("announcements")
}
